<?php 
// Fichier : backend/routes/api.php
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
// Headers pour autoriser les requ√™tes cross-origin (CORS)
header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");

 
session_start();
require '../../vendor/autoload.php';
require_once '../config/db.php';
require_once '../models/User.php';
require_once '../models/Car.php';
require_once '../models/Reservation.php';
require_once '../models/Document.php';
// On suppose que vous avez d√©j√† cr√©√© le mod√®le Avis.php
require_once '../models/Avis.php';
// Inclure le nouveau mod√®le
require_once '../models/Message.php';

// ... (vos autres require_once)

// Initialiser le nouveau mod√®le
$messageModel = new Message($pdo);
// ... (vos autres initialisations)
 
 // Initialiser les mod√®les
$userModel = new User($pdo);
$carModel = new Car($pdo);
// Initialiser le nouveau mod√®le
$avisModel = new Avis($pdo);
$documentModel = new Document($pdo);
// Initialiser le mod√®le de r√©servation
// On suppose que vous avez d√©j√† cr√©√© le mod√®le Reservation.php
// et que vous avez une m√©thode pour cr√©er une r√©servation. 
$reservationModel = new Reservation($pdo);

$action = isset($_GET['action']) ? $_GET['action'] : '';
$method = $_SERVER['REQUEST_METHOD'];
$data = json_decode(file_get_contents("php://input"), true);
 $reservationModel->updateExpiredReservations();
// Fichier : backend/routes/api.php

    function getProjectContext($pdo) {
    // 1. Contexte g√©n√©ral sur l'entreprise
    $context = "Informations g√©n√©rales : AutoLoc est une agence de location de voitures. Pour r√©server, le client doit fournir un permis de conduire et une pi√®ce d'identit√© (CIN). L'annulation est flexible.\n\n";
    
    // 2. Contexte sur les voitures disponibles
    $context .= "Voici la liste des voitures actuellement disponibles et leurs prix par jour :\n";
    try {
        $stmt = $pdo->query("SELECT marque, modele, prix_par_jour, type FROM voiture WHERE statut = 'disponible'");
        $cars = $stmt->fetchAll(PDO::FETCH_ASSOC);
        foreach ($cars as $car) {
            $context .= "- {$car['marque']} {$car['modele']} ({$car['type']}) √† {$car['prix_par_jour']} ‚Ç¨/jour.\n";
        }
    } catch (PDOException $e) {
        $context .= "Impossible de r√©cup√©rer la liste des voitures en ce moment.\n";
    }

    // 3. Contexte sur l'utilisateur s'il est connect√©
    if (isset($_SESSION['user_id'])) {
        $userId = $_SESSION['user_id'];
        
        try {
            $stmtUser = $pdo->prepare("SELECT nom, prenom FROM utilisateur WHERE id_user = ?");
            $stmtUser->execute([$userId]);
            $user = $stmtUser->fetch(PDO::FETCH_ASSOC);
            
            if ($user) {
                $context .= "\n--- CONTEXTE SP√âCIFIQUE √Ä L'UTILISATEUR ---\n";
                $context .= "L'utilisateur actuel est connect√©. Son nom est {$user['prenom']} {$user['nom']}.\n";
                
                $stmtRes = $pdo->prepare("
                    SELECT r.date_debut, r.date_fin, r.statut, v.marque, v.modele 
                    FROM reservation r JOIN voiture v ON r.id_voiture = v.id_voiture 
                    WHERE r.id_user = ? ORDER BY r.date_debut DESC LIMIT 3
                ");
                $stmtRes->execute([$userId]);
                $reservations = $stmtRes->fetchAll(PDO::FETCH_ASSOC);

                if ($reservations) {
                    $context .= "Voici ses 3 derni√®res r√©servations :\n";
                    foreach ($reservations as $res) {
                        $context .= "- Une r√©servation pour une {$res['marque']} {$res['modele']} du {$res['date_debut']} au {$res['date_fin']}. Statut : {$res['statut']}.\n";
                    }
                } else {
                    $context .= "L'utilisateur n'a aucune r√©servation pour le moment.\n";
                }
            }
        } catch (PDOException $e) {
            $context .= "Impossible de r√©cup√©rer les informations de l'utilisateur.\n";
        }
    }
    return $context;
}

/**
 * Envoie un prompt √† l'API Gemini en utilisant cURL (m√©thode robuste).
 * @param string $prompt Le prompt complet √† envoyer √† l'IA.
 * @return string La r√©ponse textuelle de l'IA.
 */
function askGemini($prompt) {
    $apiKey = "AIzaSyBl9EtpKCE0OIJrdPnsdyoFZsibwNLgOhc"; // üîê REMPLACEZ PAR VOTRE VRAIE CL√â API
    $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" . $apiKey;

    $data = ['contents' => [['parts' => [['text' => $prompt]]]]];
    $jsonData = json_encode($data);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Utile pour XAMPP en local
    
    $result = curl_exec($ch);

    if (curl_errno($ch)) {
        error_log("cURL Error: " . curl_error($ch));
        curl_close($ch);
        return "D√©sol√©, une erreur de communication r√©seau est survenue.";
    }
    curl_close($ch);
    
    $response = json_decode($result, true);

    if (isset($response['error'])) {
        error_log("Gemini API Error: " . $response['error']['message']);
        return "D√©sol√©, une erreur est survenue avec l'assistant IA.";
    }
    
    return $response['candidates'][0]['content']['parts'][0]['text'] ?? "Je n'ai pas pu formuler de r√©ponse.";
}


// ====================================================================
// ==   FONCTION 1 : POUR LE MOT DE PASSE OUBLI√â                     ==
// ====================================================================
function sendPasswordResetEmail($userEmail, $token) {
    $resetLink = "http://localhost/autoloc/frontend/pages/reset-password.html?token=" . $token;

    $mail = new PHPMailer(true);
      try {
        $mail->isSMTP(); $mail->Host = 'smtp.gmail.com'; $mail->SMTPAuth = true;
        $mail->Username = 'mostaphaelghazal102030@gmail.com'; $mail->Password = 'ojqv vktr hucv jkcp';
        $mail->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS; $mail->Port = 465; $mail->CharSet = 'UTF-8';
        $mail->setFrom('no-reply@autoloc.com', 'AutoLoc Support');
        $mail->addAddress($userEmail);
        $mail->isHTML(true); $mail->Subject = 'R√©initialisation de votre mot de passe';
        $mail->Body = "<p>Cliquez sur ce lien pour r√©initialiser votre mot de passe (valide 1 heure):</p><a href='{$resetLink}'>R√©initialiser le mot de passe</a>";
        $mail->send(); return true;
    } catch (Exception $e) { error_log("PHPMailer Error: {$mail->ErrorInfo}"); return false; }
}



// ====================================================================
// ==   FONCTION 2 : POUR LA V√âRIFICATION DE COMPTE                  ==
// ====================================================================
function sendVerificationEmail($userEmail, $code) {
    $mail = new PHPMailer(true);
      
     try {
        $mail->isSMTP(); $mail->Host = 'smtp.gmail.com'; $mail->SMTPAuth = true;
        $mail->Username = 'mostaphaelghazal102030@gmail.com'; $mail->Password = 'ojqv vktr hucv jkcp';
        $mail->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS; $mail->Port = 465; $mail->CharSet = 'UTF-8';
        $mail->setFrom('no-reply@autoloc.com', 'AutoLoc Inscription');
        $mail->addAddress($userEmail);
        $mail->isHTML(true); $mail->Subject = 'Votre code de v√©rification AutoLoc';
        $mail->Body = "<h1>Bienvenue !</h1><p>Votre code de v√©rification est :</p><h2 style='text-align:center;'>{$code}</h2>";
        $mail->send(); return true;
    } catch (Exception $e) { error_log("PHPMailer Error: {$mail->ErrorInfo}"); return false; }
}
/**
 * Cr√©e une nouvelle notification pour un utilisateur.
 * @param PDO $pdo L'objet de connexion.
 * @param int $userId L'ID de l'utilisateur.
 * @param string $message Le texte de la notification.
 * @param string $type Le type ('success', 'info', etc.).
 * @param string|null $link Un lien optionnel.
 */
function createNotification($pdo, $userId, $message, $type = 'info', $link = null) {
    $sql = "INSERT INTO notifications (id_user, message, type, lien) VALUES (?, ?, ?, ?)";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$userId, $message, $type, $link]);
}
/**
 * Envoie l'e-mail de r√©ponse de l'admin √† l'utilisateur.
 */
function sendAdminReplyEmail($userEmail, $originalSubject, $replyMessage) {
    $mail = new PHPMailer(true);
    try {
        // --- CONFIGURATION DE VOTRE SERVEUR SMTP (comme pour le mot de passe oubli√©) ---
        $mail->isSMTP();
        $mail->Host       = 'smtp.gmail.com';
        $mail->SMTPAuth   = true;
        $mail->Username   = 'mostaphaelghazal102030@gmail.com';
        $mail->Password   = 'ojqv vktr hucv jkcp';
        $mail->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;
        $mail->Port       = 465;
        $mail->CharSet    = 'UTF-8';

        $mail->setFrom('support@autoloc.com', 'Support AutoLoc');
        $mail->addAddress($userEmail);
        $mail->addReplyTo('support@autoloc.com', 'Support AutoLoc');

        $mail->isHTML(true);
        $mail->Subject = 'Re: ' . $originalSubject; // Ajoute "Re:" au sujet original
        $mail->Body    = "
            <p>Bonjour,</p>
            <p>Voici la r√©ponse √† votre demande concernant \"{$originalSubject}\" :</p>
            <blockquote style='border-left: 2px solid #ccc; padding-left: 15px; margin-left: 5px;'>
                <p>{$replyMessage}</p>
            </blockquote>
            <p>Cordialement,<br>L'√©quipe AutoLoc</p>
        ";
        
        $mail->send();
        return true;
    } catch (Exception $e) {
        error_log("Erreur PHPMailer (r√©ponse admin) : {$mail->ErrorInfo}");
        return false;
    }
}
function isAdmin() {
    return isset($_SESSION['user_role']) && $_SESSION['user_role'] === 'admin';
}

switch ($action) {
    case 'getAllCars':
        if ($method == 'GET') {
            // On v√©rifie si un param√®tre 'limit' est pr√©sent dans l'URL
            $limit = isset($_GET['limit']) ? intval($_GET['limit']) : null;
            
            // On appelle la fonction du mod√®le avec la limite (qui peut √™tre null)
            $cars = $carModel->getAllAvailable($limit);

            echo json_encode(['success' => true, 'data' => $cars]);
        }
        break;

    case 'getCarDetails':
        if ($method == 'GET' && isset($_GET['id'])) {
            $car = $carModel->getById($_GET['id']);
            echo json_encode(['success' => true, 'data' => $car]);
        }
        break;

     case 'register':
        if ($method == 'POST') {
            $data = json_decode(file_get_contents("php://input"), true);
            if (!empty($data['nom']) && !empty($data['email']) && !empty($data['password'])) {
                $code = $userModel->register($data['nom'], $data['prenom'], $data['email'], $data['password']);
                if ($code) {
                    sendVerificationEmail($data['email'], $code);
                    echo json_encode(['success' => true, 'message' => 'Inscription r√©ussie.']);
                } else {
                    echo json_encode(['success' => false, 'message' => 'Cet email est d√©j√† utilis√©.']);
                }
            } else {
                echo json_encode(['success' => false, 'message' => 'Veuillez remplir tous les champs.']);
            }
        }
        break;
        
   // Dans backend/routes/api.php
   case 'updateUserProfile':
        if (isset($_SESSION['user_id']) && $method == 'POST') {
            $id_user = $_SESSION['user_id'];
            $data = json_decode(file_get_contents("php://input"), true);
            
            // On v√©rifie que les donn√©es de base sont l√†
            if (isset($data['nom'], $data['prenom'])) {
                // Le mot de passe est optionnel
                $password = $data['password'] ?? null;
                
                $success = $userModel->updateProfile($id_user, $data['nom'], $data['prenom'], $password);
                
                if ($success) {
                    echo json_encode(['success' => true, 'message' => 'Profil mis √† jour avec succ√®s.']);
                } else {
                    echo json_encode(['success' => false, 'message' => 'Erreur lors de la mise √† jour du profil.']);
                }
            } else {
                echo json_encode(['success' => false, 'message' => 'Donn√©es manquantes.']);
            }
        }
        break;

// ...
case 'login':
    // 1. On v√©rifie d'abord que la m√©thode HTTP est bien POST.
    if ($method !== 'POST') {
        http_response_code(405); // Method Not Allowed
        echo json_encode(['success' => false, 'message' => 'M√©thode non autoris√©e.']);
        break; // Arr√™t imm√©diat
    }

    // 2. On v√©rifie la pr√©sence des donn√©es n√©cessaires (plus s√ªr que !empty).
    if (!isset($data['email']) || !isset($data['password'])) {
        http_response_code(400); // Bad Request
        echo json_encode(['success' => false, 'message' => 'Email et mot de passe sont requis.']);
        break;
    }

    // 3. On nettoie les entr√©es pour la s√©curit√©.
    $email = filter_var(trim($data['email']), FILTER_SANITIZE_EMAIL);
    $password = $data['password'];

    // 4. On v√©rifie que les champs ne sont pas vides apr√®s nettoyage.
    if (empty($email) || empty($password)) {
        http_response_code(400);
        echo json_encode(['success' => false, 'message' => 'Les champs ne peuvent pas √™tre vides.']);
        break;
    }
 
    // 5. On tente de connecter l'utilisateur via le mod√®le.
    $user = $userModel->login($email, $password);

    if ($user) {
        // ---- SUCC√àS DE LA CONNEXION ----
        
        // 6. Mesure de s√©curit√© : on r√©g√©n√®re l'ID de session.
        session_regenerate_id(true);

        // 7. On stocke les informations essentielles dans la session.
        $_SESSION['user_id'] = $user['id_user'];
        $_SESSION['user_role'] = $user['role'];
        // On peut aussi stocker le pr√©nom pour un message d'accueil
        $_SESSION['user_prenom'] = $user['prenom'];

        // 8. On renvoie une r√©ponse positive au frontend.
        // On inclut seulement les informations non-sensibles n√©cessaires.
        echo json_encode([
            'success' => true, 
            'message' => 'Connexion r√©ussie !', 
            'user' => [
                'prenom' => $user['prenom'], // On renvoie le pr√©nom pour un message d'accueil
                'role' => $user['role']      // Et le r√¥le pour la redirection
            ]
        ]);
    } else {
        // ---- √âCHEC DE LA CONNEXION ----
        http_response_code(401); // Unauthorized
        echo json_encode(['success' => false, 'message' => 'Email ou mot de passe incorrect.']);
    }
    break;

// ...
case 'createReservation':
    // On s'assure que la requ√™te est bien en POST et que l'utilisateur est connect√©.
    if ($method !== 'POST' || !isset($_SESSION['user_id'])) {
        http_response_code(403); // Forbidden
        echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©. Veuillez vous connecter.']);
        break;
    }

    // On r√©cup√®re et on valide les donn√©es envoy√©es par le formulaire JS.
    $id_user = $_SESSION['user_id'];
    $id_voiture = $data['id_voiture'] ?? null;
    $date_debut = $data['date_debut'] ?? null;
    $date_fin = $data['date_fin'] ?? null;

    if (!$id_voiture || !$date_debut || !$date_fin) {
        http_response_code(400); // Bad Request
        echo json_encode(['success' => false, 'message' => 'Donn√©es de r√©servation manquantes.']);
        break;
    }
    
    // --- Validation des dates ---
    try {
        $start = new DateTime($date_debut);
        $end = new DateTime($date_fin);
        if ($end < $start) {
            http_response_code(400);
            echo json_encode(['success' => false, 'message' => 'La date de fin ne peut pas √™tre ant√©rieure √† la date de d√©but.']);
            break;
        }
    } catch (Exception $e) {
        http_response_code(400);
        echo json_encode(['success' => false, 'message' => 'Format de date invalide.']);
        break;
    }


    // =========================================================
    // ==     NOUVELLE √âTAPE : V√âRIFICATION DE DISPONIBILIT√â    ==
    // =========================================================
    // On appelle la nouvelle m√©thode du mod√®le Reservation.
    $isAvailable = $reservationModel->isCarAvailable($id_voiture, $date_debut, $date_fin);

    if (!$isAvailable) {
        // Si la voiture n'est PAS disponible, on arr√™te tout et on renvoie une erreur claire.
        http_response_code(409); // 409 Conflict (indique une collision de ressource)
        echo json_encode(['success' => false, 'message' => 'D√©sol√©, cette voiture est d√©j√† r√©serv√©e sur les dates s√©lectionn√©es. Veuillez choisir une autre p√©riode.']);
        break; // On sort du case.
    }
    
    // --- Si on arrive ici, la voiture est disponible, on peut continuer. ---

    // S√âCURIT√â : Recalcul du prix c√¥t√© serveur.
    $car = $carModel->getById($id_voiture);
    if (!$car) {
        http_response_code(404); // Not Found
        echo json_encode(['success' => false, 'message' => 'La voiture demand√©e n\'existe pas.']);
        break;
    }

    $interval = $start->diff($end);
    $days = $interval->days + 1; // +1 pour inclure le premier jour.
    $montant_total = $days * $car['prix_par_jour'];

    // On tente de cr√©er la r√©servation.
    $success = $reservationModel->create($id_user, $id_voiture, $date_debut, $date_fin, $montant_total);

    if ($success) {
        // La r√©servation a √©t√© cr√©√©e avec succ√®s.
        echo json_encode(['success' => true, 'message' => 'R√©servation enregistr√©e avec succ√®s !']);
    } else {
        // Une erreur s'est produite lors de l'insertion en BDD.
        http_response_code(500); // Internal Server Error
        echo json_encode(['success' => false, 'message' => 'Une erreur interne est survenue lors de l\'enregistrement de la r√©servation.']);
    }
    break;
         case 'getUserReservations':
        // On v√©rifie si l'utilisateur est bien connect√©
        if ($method == 'GET' && isset($_SESSION['user_id'])) {
            $id_user = $_SESSION['user_id'];
            
            // On appelle la nouvelle fonction du mod√®le
            $reservations = $reservationModel->getByUserId($id_user);

            echo json_encode(['success' => true, 'data' => $reservations]);
        } else {
            // Si non connect√©, on renvoie une erreur
            http_response_code(403); // Forbidden
            echo json_encode(['success' => false, 'message' => 'Acc√®s non autoris√©.']);
        }
        break;
    // Pour la d√©connexion, on d√©truit simplement la session
    // On n'a pas besoin de v√©rifier le r√¥le ici, car c'est une action simple
    // qui ne n√©cessite pas de permissions sp√©ciales.
    // On peut aussi renvoyer un message de succ√®s.
    // On n'a pas besoin de v√©rifier le r√¥le ici, car c'est une action simple
    // qui ne n√©cessite pas de permissions sp√©ciales.
      case 'adminGetAllCars':
        if (isAdmin()) {
            $cars = $carModel->getAllForAdmin();
            echo json_encode(['success' => true, 'data' => $cars]);
        } else {
            http_response_code(403);
            echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
        }
        break;

    case 'adminAddCar':
    // On v√©rifie si l'utilisateur est un admin et si la m√©thode est POST
    if (isAdmin() && $method == 'POST') {
        
        // 1. On r√©cup√®re toutes les donn√©es du formulaire, y compris la nouvelle description
        $marque = $_POST['marque'] ?? '';
        $modele = $_POST['modele'] ?? '';
        $type = $_POST['type'] ?? '';
        $prix = $_POST['prix_par_jour'] ?? 0;
        $annee = $_POST['annee'] ?? 0;
        $statut = $_POST['statut'] ?? 'disponible';
        $description = $_POST['description'] ?? ''; // <-- NOUVEAU : On r√©cup√®re la description

        // 2. On g√®re l'upload de l'image
        $image_name = 'default.jpg'; 
        if (isset($_FILES['image']) && $_FILES['image']['error'] == 0) {
            $target_dir = "../../uploads/cars/"; // Assurez-vous que ce chemin est correct
            // Cr√©er un nom de fichier unique pour √©viter les conflits
            $image_name = uniqid('car_', true) . '.' . pathinfo($_FILES["image"]["name"], PATHINFO_EXTENSION);
            $target_file = $target_dir . $image_name;
            
            // On d√©place le fichier upload√©
            if (!move_uploaded_file($_FILES["image"]["tmp_name"], $target_file)) {
                // En cas d'√©chec de l'upload, on renvoie une erreur
                echo json_encode(['success' => false, 'message' => "Erreur lors de l'upload de l'image."]);
                exit();
            }
        }
        
        // 3. On appelle la fonction create() du mod√®le avec TOUS les param√®tres
        // Votre fonction create() dans Car.php n'a pas encore le param√®tre description,
        // nous devons d'abord la mettre √† jour. (Je vais supposer que vous avez la version que je vous ai donn√©e)
        $success = $carModel->create($marque, $modele, $type, $prix, $annee, $image_name, $statut, $description);

        // 4. CORRECTION : On renvoie une r√©ponse JSON, pas une redirection
        if ($success) {
        echo json_encode(['success' => true, 'message' => 'Voiture ajout√©e avec succ√®s !']);
    } else {
        echo json_encode(['success' => false, 'message' => 'Erreur lors de l\'ajout.']);
    }
    } else {
        // Si l'utilisateur n'est pas admin ou si la m√©thode n'est pas POST
        http_response_code(403); // Forbidden
        echo json_encode(['success' => false, 'message' => 'Acc√®s non autoris√©.']);
    }
    break;
        
    // Vous ajouterez 'adminUpdateCar' et 'adminDeleteCar' sur le m√™me principe.
   case 'adminUpdateCar':
    if (isAdmin() && $method == 'POST' && !empty($_POST['id_voiture'])) {
        
        $carId = $_POST['id_voiture'];
        $newImageName = null;

        if (isset($_FILES['image']) && $_FILES['image']['error'] == 0 && !empty($_FILES['image']['name'])) {
            $target_dir = "../../uploads/cars/";
            $newImageName = uniqid('car_', true) . '.' . pathinfo($_FILES["image"]["name"], PATHINFO_EXTENSION);
            $target_file = $target_dir . $newImageName;
            move_uploaded_file($_FILES["image"]["tmp_name"], $target_file);
        }

        // CORRECTION : On utilise l'op√©rateur ?? pour √©viter les erreurs "Undefined array key"
        $success = $carModel->update(
            $carId,
            $_POST['marque'] ?? '',
            $_POST['modele'] ?? '',
            $_POST['type'] ?? '',
            $_POST['prix_par_jour'] ?? 0,
            $_POST['annee'] ?? 0,
            $_POST['statut'] ?? 'disponible',
            $_POST['description'] ?? '', // <-- S√âCURIS√â
            $newImageName
        );

        if ($success) {
            echo json_encode(['success' => true, 'message' => 'Voiture modifi√©e avec succ√®s.']);
        } else {
            echo json_encode(['success' => false, 'message' => 'Erreur lors de la modification de la voiture.']);
        }
    } else {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => 'Acc√®s non autoris√© ou donn√©es manquantes.']);
    }
    break;

    case 'adminDeleteCar':
        if (isAdmin() && $method == 'POST') {
            // Les donn√©es sont envoy√©es en JSON par notre JS
            $data = json_decode(file_get_contents("php://input"), true);
            $id = $data['id_voiture'];

            $success = $carModel->delete($id);

            if ($success) {
                echo json_encode(['success' => true, 'message' => 'Voiture supprim√©e avec succ√®s.']);
            } else {
                echo json_encode(['success' => false, 'message' => 'Erreur lors de la suppression. La voiture est peut-√™tre li√©e √† une r√©servation existante.']);
            }
        } else {
            http_response_code(403);
            echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
        }
        break;
         // ===============================================
    // ==     NOUVELLES ROUTES GESTION UTILISATEURS   ==
    // ===============================================

    case 'adminGetAllUsers':
        if (isAdmin()) {
            $users = $userModel->getAll($_SESSION['user_id']); // On passe l'ID de l'admin
            echo json_encode(['success' => true, 'data' => $users]);
        } else {
            http_response_code(403);
            echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
        }
        break;

    case 'adminUpdateUserRole':
        if (isAdmin() && $method == 'POST') {
            $data = json_decode(file_get_contents("php://input"), true);
            $success = $userModel->updateRole($data['id_user'], $data['role']);
            if ($success) {
                echo json_encode(['success' => true, 'message' => 'R√¥le mis √† jour.']);
            } else {
                echo json_encode(['success' => false, 'message' => 'Erreur lors de la mise √† jour.']);
            }
        }
        break;

    case 'adminDeleteUser':
        if (isAdmin() && $method == 'POST') {
            $data = json_decode(file_get_contents("php://input"), true);
            $success = $userModel->delete($data['id_user']);
            if ($success) {
                echo json_encode(['success' => true, 'message' => 'Utilisateur supprim√©.']);
            } else {
                echo json_encode(['success' => false, 'message' => 'Erreur lors de la suppression.']);
            }
        }
        break;

    case 'logout':
        session_destroy();
        echo json_encode(['success' => true, 'message' => 'D√©connexion r√©ussie.']);
        break;

    case 'checkAuth': // Pour v√©rifier si l'utilisateur est toujours connect√©
        if(isset($_SESSION['user_id'])) {
            $user = $userModel->findById($_SESSION['user_id']);
            echo json_encode(['success' => true, 'isLoggedIn' => true, 'user' => $user]);
        } else {
            echo json_encode(['success' => true, 'isLoggedIn' => false]);
        }
        break;
        

    default:
        http_response_code(404);
        echo json_encode(['success' => false, 'message' => 'Action non reconnue.']);
        break;

         // ===============================================
    // ==   NOUVELLES ROUTES GESTION R√âSERVATIONS   ==
    // ===============================================

    case 'adminGetAllReservations':
        if (isAdmin()) {
            $reservations = $reservationModel->getAll();
            echo json_encode(['success' => true, 'data' => $reservations]);
        } else {
            http_response_code(403);
            echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
        }
        break;

case 'adminUpdateReservationStatus':
    if (isAdmin() && $method == 'POST') {
        $data = json_decode(file_get_contents("php://input"), true);
        
        // On r√©cup√®re les donn√©es envoy√©es par le JavaScript
        $reservationId = $data['id_reservation'] ?? null;
        $newStatus = $data['statut'] ?? null;

        // Validation simple
        if (!$reservationId || !$newStatus) {
            echo json_encode(['success' => false, 'message' => 'Donn√©es manquantes.']);
            exit();
        }

        // On met √† jour le statut dans la base de donn√©es
        $success = $reservationModel->updateStatus($reservationId, $newStatus);
        
        if ($success) {
            // =========================================================
            // ==     MODIFICATION : On g√©n√®re une notification       ==
            // =========================================================
            try {
                // 1. On r√©cup√®re les d√©tails de la r√©servation pour conna√Ætre l'ID de l'utilisateur
                $reservation = $reservationModel->getById($reservationId);
                if ($reservation) {
                    $userId = $reservation['id_user'];
                    $carInfo = $reservation['marque'] . ' ' . $reservation['modele'];
                    $message = '';
                    $type = 'info';

                    // 2. On pr√©pare un message personnalis√© en fonction du nouveau statut
                    switch ($newStatus) {
                        case 'confirm√©e':
                            $message = "Bonne nouvelle ! Votre r√©servation pour la {$carInfo} a √©t√© confirm√©e.";
                            $type = 'success';
                            break;
                        case 'annul√©e':
                            $message = "Attention : Votre r√©servation pour la {$carInfo} a √©t√© annul√©e.";
                            $type = 'warning';
                            break;
                        case 'termin√©e':
                            // On peut choisir de ne pas notifier pour "termin√©e", ou envoyer un message de remerciement
                             $message = "Merci d'avoir lou√© la {$carInfo} avec AutoLoc !";
                             break;
                    }

                    // 3. Si un message a √©t√© d√©fini, on cr√©e la notification
                    if (!empty($message)) {
                        createNotification(
                            $pdo, 
                            $userId, 
                            $message, 
                            $type, 
                            'pages/dashboard-client.html' // Lien vers la page des r√©servations
                        );
                    }
                }
            } catch (Exception $e) {
                // Si la cr√©ation de la notification √©choue, on l'enregistre dans les logs
                // mais on ne bloque pas la r√©ponse de succ√®s pour l'admin.
                error_log("Erreur de cr√©ation de notification : " . $e->getMessage());
            }

            echo json_encode(['success' => true, 'message' => 'Statut de la r√©servation mis √† jour.']);

        } else {
            echo json_encode(['success' => false, 'message' => 'Erreur lors de la mise √† jour.']);
        }
    } else {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
    }
    break;
     case 'adminReplyToMessage':
        if (isAdmin() && $method == 'POST') {
            $data = json_decode(file_get_contents("php://input"), true);
            $messageId = $data['id_message'] ?? null;
            $replyText = $data['reply_text'] ?? '';

            if (!$messageId || empty($replyText)) {
                echo json_encode(['success' => false, 'message' => 'Donn√©es invalides.']);
                exit();
            }

            // 1. R√©cup√©rer le message original pour avoir l'email du destinataire
            $originalMessage = $messageModel->getById($messageId);
            if (!$originalMessage) {
                echo json_encode(['success' => false, 'message' => 'Message original non trouv√©.']);
                exit();
            }

            // 2. Envoyer l'email
            $emailSent = sendAdminReplyEmail($originalMessage['email_expediteur'], $originalMessage['sujet'], $replyText);

            if ($emailSent) {
                // 3. Si l'email est parti, marquer le message comme "r√©pondu"
                $messageModel->markAsReplied($messageId);
                echo json_encode(['success' => true, 'message' => 'R√©ponse envoy√©e avec succ√®s.']);
            } else {
                echo json_encode(['success' => false, 'message' => 'Erreur lors de l\'envoi de l\'email.']);
            }
        }
        break;
        // histortique global de reservation 
case 'getGlobalHistory':
    if (isAdmin()) {
        try {
            $sql = "SELECT * FROM historique_global ORDER BY date_modification DESC";
            $stmt = $pdo->query($sql);
            $history = $stmt->fetchAll(PDO::FETCH_ASSOC);
            echo json_encode(['success' => true, 'data' => $history]);
        } catch (PDOException $e) {
            echo json_encode(['success' => false, 'message' => 'Erreur de base de donn√©es.']);
        }
    } else {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
    }
    break;
         // ===============================================
    // ==         NOUVELLES ROUTES DOCUMENTS        ==
    // ===============================================

 // Dans api.php, modifiez ce case

case 'uploadDocument':
    if (isset($_SESSION['user_id']) && $method == 'POST') {
        $id_user = $_SESSION['user_id'];
        
        if (isset($_POST['type_doc']) && isset($_FILES['document_file']) && $_FILES['document_file']['error'] == 0) {
            $type_doc = $_POST['type_doc'];
            $target_dir = "../../uploads/documents/"; // Votre chemin conserv√©
            $file_name = $id_user . '-' . uniqid() . '-' . basename($_FILES["document_file"]["name"]);
            $target_file = $target_dir . $file_name;
            
            if (move_uploaded_file($_FILES["document_file"]["tmp_name"], $target_file)) {
                $success = $documentModel->create($id_user, $type_doc, $file_name);
                if ($success) {
                    // RENVOYER UNE R√âPONSE JSON
                    echo json_encode(['success' => true, 'message' => 'Document envoy√© avec succ√®s !']);
                } else {
                    echo json_encode(['success' => false, 'message' => 'Erreur lors de l\'enregistrement.']);
                }
            } else {
                echo json_encode(['success' => false, 'message' => 'Erreur lors de l\'upload du fichier.']);
            }
        } else {
            echo json_encode(['success' => false, 'message' => 'Donn√©es ou fichier manquant.']);
        }
    }
    break;

    case 'getUserDocuments': // Pour le client
        if (isset($_SESSION['user_id'])) {
            $docs = $documentModel->getByUserId($_SESSION['user_id']);
            echo json_encode(['success' => true, 'data' => $docs]);
        }
        break;

    case 'adminGetPendingDocuments': // Pour l'admin
        if (isAdmin()) {
            $docs = $documentModel->getPending();
            echo json_encode(['success' => true, 'data' => $docs]);
        }
        break;

    case 'adminUpdateDocumentStatus': // Pour l'admin
        if (isAdmin() && $method == 'POST') {
            $data = json_decode(file_get_contents("php://input"), true);
            $success = $documentModel->updateStatus($data['id_doc'], $data['statut']);
            echo json_encode(['success' => $success]);
        }
        break;
        
   
case 'leaveReview':
    // L'utilisateur est-il bien connect√© ?
    if (isset($_SESSION['user_id']) && $method == 'POST') {
        
        // On r√©cup√®re le corps de la requ√™te JSON envoy√©e par le JS
        $data = json_decode(file_get_contents("php://input"), true);

        // --- POINT DE D√âBOGAGE N¬∞1 ---
        // Est-ce que les donn√©es sont bien re√ßues et d√©cod√©es ?
        if ($data === null) {
            // Si $data est null, le JSON est mal form√© ou vide.
            error_log("API leaveReview: Erreur de d√©codage JSON.");
            echo json_encode(['success' => false, 'message' => 'Donn√©es invalides.']);
            exit();
        }

        // --- POINT DE D√âBOGAGE N¬∞2 ---
        // Est-ce que toutes les cl√©s n√©cessaires sont pr√©sentes ?
        if (!isset($data['id_voiture'], $data['note'], $data['commentaire'])) {
            error_log("API leaveReview: Donn√©es manquantes. Re√ßu: " . print_r($data, true));
            echo json_encode(['success' => false, 'message' => 'Donn√©es manquantes.']);
            exit();
        }

        // Appel de la fonction du mod√®le
        $success = $avisModel->create(
            $_SESSION['user_id'],
            $data['id_voiture'],
            $data['note'],
            $data['commentaire']
        );

        // La fonction create() a renvoy√© false.
        echo json_encode(['success' => $success]);

    } else {
        // L'utilisateur n'est pas connect√© ou la m√©thode n'est pas POST
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
    }
    break;
 case 'getCarReviews': // <-- Est-ce que le nom est EXACTEMENT celui-ci ?
        if (isset($_GET['id'])) {
            $avisModel = new Avis($pdo); // Assurez-vous que $avisModel est initialis√©
            $reviews = $avisModel->getByCarId($_GET['id']);
            echo json_encode(['success' => true, 'data' => $reviews]);
        }
        break;
        case 'getCarBookedDates':
    if (isset($_GET['id'])) {
        $dates = $reservationModel->getBookedDatesByCarId($_GET['id']);
        echo json_encode(['success' => true, 'data' => $dates]);
    }
    break;
     case 'sendContactMessage':
        if ($method == 'POST') {
            // On s'attend √† recevoir des donn√©es JSON
            $data = json_decode(file_get_contents("php://input"), true);

            // Validation simple des donn√©es
            if (!empty($data['email']) && filter_var($data['email'], FILTER_VALIDATE_EMAIL) && !empty($data['subject']) && !empty($data['message'])) {
                
                // On "nettoie" les donn√©es pour √©viter les injections XSS
                $email = htmlspecialchars(strip_tags($data['email']));
                $subject = htmlspecialchars(strip_tags($data['subject']));
                $message = htmlspecialchars(strip_tags($data['message']));

                $success = $messageModel->create($email, $subject, $message);

                if ($success) {
                    http_response_code(200);
                    echo json_encode(['success' => true, 'message' => 'Votre message a bien √©t√© enregistr√©.']);
                } else {
                    http_response_code(500);
                    echo json_encode(['success' => false, 'message' => 'Erreur interne du serveur lors de l\'enregistrement.']);
                }

            } else {
                http_response_code(400); // Bad Request
                echo json_encode(['success' => false, 'message' => 'Veuillez remplir tous les champs correctement.']);
            }
        }
        break;
          case 'getAllMessages':
        // Action prot√©g√©e, on v√©rifiera si l'utilisateur est un admin (bonus)
        // Pour l'instant, on suppose que l'acc√®s est s√©curis√©
        if ($method == 'GET') {
            $messages = $messageModel->getAll();
            echo json_encode(['success' => true, 'data' => $messages]);
        }
        break;

    case 'markMessageAsRead':
        if ($method == 'POST') {
            $data = json_decode(file_get_contents("php://input"), true);
            if (!empty($data['id'])) {
                $success = $messageModel->markAsRead($data['id']);
                if ($success) {
                    echo json_encode(['success' => true]);
                } else {
                    echo json_encode(['success' => false, 'message' => 'Erreur de base de donn√©es.']);
                }
            }
        }
        break;
         case 'requestPasswordReset':
        $data = json_decode(file_get_contents("php://input"), true);
        $user = $userModel->findByEmail($data['email']);
        if ($user) {
            $token = $userModel->createPasswordResetToken($user['id_user']);
            sendPasswordResetEmail($user['email'], $token);
        }
        echo json_encode(['success' => true, 'message' => '  un e-mail de r√©initialisation a √©t√© envoy√©.']);
        break;

    case 'resetPassword':
        $data = json_decode(file_get_contents("php://input"), true);
        if (!empty($data['token']) && !empty($data['password']) && $data['password'] === $data['password_confirm']) {
            $success = $userModel->resetPassword($data['token'], $data['password']);
            if ($success) {
                echo json_encode(['success' => true, 'message' => 'Votre mot de passe a √©t√© mis √† jour.']);
            } else {
                echo json_encode(['success' => false, 'message' => 'Lien invalide ou expir√©.']);
            }
        } else {
            echo json_encode(['success' => false, 'message' => 'Donn√©es invalides.']);
        }
        break;
        // cerification de email 
        case 'verifyCode':
        if ($method == 'POST') {
            $data = json_decode(file_get_contents("php://input"), true);
            if (!empty($data['email']) && !empty($data['code'])) {
                $success = $userModel->verifyCode($data['email'], $data['code']);
                if ($success) {
                    echo json_encode(['success' => true, 'message' => 'Votre compte a √©t√© activ√© !']);
                } else {
                    echo json_encode(['success' => false, 'message' => 'Code de v√©rification incorrect.']);
                }
            } else {
                echo json_encode(['success' => false, 'message' => 'Email ou code manquant.']);
            }
        }
        break;
       // Fichier : backend/routes/api.php


    // ... (vos autres cases : getAllCars, adminAddCar, etc.)

    case 'getDashboardStats':
        // On v√©rifie si l'utilisateur est un admin pour s√©curiser cette action
        if (isAdmin()) { 
            try {
                // Requ√™te pour le total des r√©servations
                $totalBookings = $pdo->query("SELECT COUNT(*) FROM reservation")->fetchColumn();
                
                // Requ√™te pour les voitures disponibles
                $availableCars = $pdo->query("SELECT COUNT(*) FROM voiture WHERE statut = 'disponible'")->fetchColumn();
                
                // Requ√™te pour les utilisateurs "actifs" (tous les clients)
                $activeUsers = $pdo->query("SELECT COUNT(*) FROM utilisateur WHERE role = 'client'")->fetchColumn();
                
                // On renvoie les donn√©es en format JSON
                echo json_encode([
                    'success' => true,
                    'data' => [
                        'totalBookings' => $totalBookings,
                        'availableCars' => $availableCars,
                        'activeUsers' => $activeUsers
                    ]
                ]);
            } catch (PDOException $e) {
                // En cas d'erreur avec la base de donn√©es
                http_response_code(500);
                echo json_encode(['success' => false, 'message' => 'Erreur de base de donn√©es.']);
            }
        } else {
            // Si un non-admin essaie d'acc√©der aux stats
            http_response_code(403);
            echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
        }
        break;
 
case 'cancelReservation':
        // Action r√©serv√©e aux utilisateurs connect√©s
        if ($method == 'POST' && isset($_SESSION['user_id'])) {
            $data = json_decode(file_get_contents("php://input"), true);
            $reservationId = $data['id_reservation'] ?? null;
            $userId = $_SESSION['user_id'];

            if ($reservationId) {
                $result = $reservationModel->cancelByUser($reservationId, $userId);
                echo json_encode($result);
            } else {
                echo json_encode(['success' => false, 'message' => 'ID de r√©servation manquant.']);
            }
        } else {
            http_response_code(403);
            echo json_encode(['success' => false, 'message' => 'Vous devez √™tre connect√©.']);
        }
        break;
// DANS VOTRE "switch ($action) { ... }"
// Fichier : backend/routes/api.php



case 'chatbotQuery':
    if ($method == 'POST') {
        // 1. R√©cup√©rer les donn√©es envoy√©es par le JavaScript
        $data = json_decode(file_get_contents("php://input"), true);
        $userQuestion = htmlspecialchars($data['question'] ?? '');
        $history = $data['history'] ?? [];

        // 2. R√©cup√©rer le contexte du projet (voitures, utilisateur, etc.)
        // (Assurez-vous que la fonction getProjectContext($pdo) est bien d√©finie avant le switch)
        $context = getProjectContext($pdo); 

        // 3. Formater l'historique pour le prompt
        $historyString = "";
        foreach ($history as $message) {
            $role = ($message['role'] === 'user') ? 'Utilisateur' : 'AutoBot';
            $historyString .= "{$role}: {$message['text']}\n";
        }

        // 4. Construire le prompt final et d√©taill√© pour l'IA
        $finalPrompt = "
        Tu es AutoBot, un assistant expert et amical de l'agence de location 'AutoLoc'.
        Ta mission est de r√©pondre aux questions et de guider les utilisateurs.

        R√àGLES STRICTES POUR LES COMMANDES D'ACTION :
        1. Tu ne dois ajouter une commande que si l'intention de l'utilisateur est EXPLICITE et SANS AMBIGU√èT√â.
        2. Pour les salutations simples comme 'Bonjour', 'Salut', 'hi', '√ßa va ?', r√©ponds simplement par une salutation SANS AJOUTER DE COMMANDE.
        3. La commande DOIT respecter ce format : [ACTION:NOM_ACTION:VALEUR]
        4. La VALEUR pour BOOK_CAR et SHOW_CAR_DETAILS doit √™tre UNIQUEMENT le num√©ro de l'ID de la voiture trouv√© dans le contexte.

        COMMANDES POSSIBLES :
        - [ACTION:BOOK_CAR:ID_NUMERIQUE] : Si l'utilisateur veut R√âSERVER une voiture sp√©cifique.
        - [ACTION:SHOW_CAR_DETAILS:ID_NUMERIQUE] : Si l'utilisateur demande des D√âTAILS sur une voiture sp√©cifique.
        - [ACTION:SHOW_ALL_CARS] : Si l'utilisateur demande √† VOIR TOUTES les voitures.

        CONTEXTE:
        {$context}
        ---
        HISTORIQUE DE LA CONVERSATION:
        {$historyString}
        ---
        DERNI√àRE QUESTION DE L'UTILISATEUR:
        {$userQuestion}
        ";

        // 5. Appeler l'IA pour obtenir la r√©ponse
        // (Assurez-vous que la fonction askGemini($prompt) est bien d√©finie avant le switch)
        $botResponse = askGemini($finalPrompt);
        
        // 6. NOUVEAU : Enregistrer la conversation dans la base de donn√©es
        try {
            if (!isset($_SESSION['chatbot_session_id'])) {
                $_SESSION['chatbot_session_id'] = uniqid('chat_', true);
            }
            $sessionId = $_SESSION['chatbot_session_id'];
            $userId = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null;

            $sql = "INSERT INTO conversation_chatbot (session_id, id_user, prompt_utilisateur, reponse_bot) VALUES (?, ?, ?, ?)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([$sessionId, $userId, $userQuestion, $botResponse]);
        } catch (PDOException $e) {
            error_log("Erreur d'enregistrement de la conversation chatbot : " . $e->getMessage());
        }
        
        // 7. Analyser la r√©ponse de l'IA pour extraire les actions
        $actionRegex = '/\[ACTION:([A-Z_]+):?([^\]]*)?\]/';
        preg_match($actionRegex, $botResponse, $match);

        // 8. Pr√©parer la r√©ponse JSON pour le frontend
        $responseData = [
            'success' => true,
            'answer' => trim(preg_replace($actionRegex, '', $botResponse)),
            'action' => null
        ];

        if ($match) {
            $action = $match[1];
            $value = $match[2];
            
            if (($action === 'SHOW_CAR_DETAILS' || $action === 'BOOK_CAR') && is_numeric($value)) {
                $carDetails = $carModel->getById($value);
                if ($carDetails) {
                    $responseData['action'] = [
                        'type' => 'DISPLAY_CAR_CARD',
                        'data' => $carDetails
                    ];
                }
            } else if ($action === 'SHOW_ALL_CARS') {
                $responseData['action'] = ['type' => 'SHOW_ALL_CARS'];
            }
        }
        
        // 9. Renvoyer la r√©ponse finale au JavaScript
        echo json_encode($responseData);
    }
    break;
    
  // Fichier : backend/routes/api.php
// Fichier : backend/routes/api.php

case 'getChatbotContext':
    if ($method == 'GET') {
        // On initialise notre variable qui contiendra tout le contexte.
        $contextText = "Informations g√©n√©rales : AutoLoc est une agence de location de voitures. Pour r√©server, le client a besoin d'un permis de conduire et d'une pi√®ce d'identit√© (CIN). L'annulation est flexible.\n\n";
        $contextText .= "Voici la liste des voitures actuellement disponibles et leurs prix par jour :\n";

        try {
            // La requ√™te est correcte, elle s√©lectionne bien id_voiture.
            $stmt = $pdo->query("SELECT id_voiture, marque, modele, prix_par_jour, type FROM voiture WHERE statut = 'disponible'");
            $cars = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if (count($cars) === 0) {
                $contextText .= "Actuellement, il n'y a pas de voitures sp√©cifiques list√©es comme disponibles.";
            } else {
                foreach ($cars as $car) {
                    // ===============================================
                    // ==         LA CORRECTION EST ICI             ==
                    // ===============================================
                    // On ajoute les infos √† la bonne variable : $contextText
                    $contextText .= "- (ID: {$car['id_voiture']}) {$car['marque']} {$car['modele']} ({$car['type']}) √† {$car['prix_par_jour']} ‚Ç¨/jour.\n";
                }
            }
            // On renvoie la variable qui contient TOUT.
            echo json_encode(['success' => true, 'context' => $contextText]);

        } catch (PDOException $e) {
            error_log("Database error in getChatbotContext: " . $e->getMessage());
            echo json_encode(['success' => false, 'context' => 'Erreur de base de donn√©es.']);
        }
    }
    break;
       case 'generateCarDescription':
        if ($method == 'POST') {
            $data = json_decode(file_get_contents("php://input"), true);

            // On r√©cup√®re les infos d√©j√† saisies par l'admin
            $marque = htmlspecialchars($data['marque'] ?? '');
            $modele = htmlspecialchars($data['modele'] ?? '');
            $type = htmlspecialchars($data['type'] ?? '');
            $annee = htmlspecialchars($data['annee'] ?? '');

            if (empty($marque) || empty($modele)) {
                echo json_encode(['success' => false, 'description' => 'Veuillez au moins renseigner la marque et le mod√®le.']);
                exit();
            }

            // On construit un prompt sp√©cifique pour la description
            $prompt = "
            Tu es un expert en marketing automobile pour une agence de location nomm√©e AutoLoc.
            R√©dige une description courte (2-3 phrases), attractive et engageante pour la voiture suivante.
            Mets en avant les points forts probables de ce type de v√©hicule (confort, sportivit√©, espace, √©conomie...).
            
            Informations sur la voiture :
            - Marque : {$marque}
            - Mod√®le : {$modele}
            - Type : {$type}
            - Ann√©e : {$annee}

            Le ton doit √™tre professionnel mais s√©duisant. Ne retourne que le texte de la description, sans introduction ni conclusion.
            ";
            
            // On r√©utilise notre fonction existante pour appeler Gemini
            $description = askGemini($prompt);

            echo json_encode(['success' => true, 'description' => trim($description)]);
        }
        break;
     
// Fichier : backend/routes/api.php
// Fichier : backend/routes/api.php
// √Ä l'int√©rieur de votre switch ($action)

case 'getBookingTraffic':
    if (isAdmin()) { // On s'assure que seul un admin peut acc√©der
        try {
            // 1. R√©cup√©rer les filtres optionnels depuis l'URL
            $carType = $_GET['type'] ?? 'all';
            $period = $_GET['period'] ?? 'all';

            // 2. Construire la requ√™te SQL de base avec une jointure
            $sql = "SELECT r.date_debut 
                    FROM reservation r 
                    JOIN voiture v ON r.id_voiture = v.id_voiture";
            
            // On pr√©pare les tableaux pour les conditions et les param√®tres
            $conditions = [];
            $params = [];

            // Ajouter dynamiquement la condition pour le type de voiture
            if ($carType !== 'all') {
                $conditions[] = "v.type = ?";
                $params[] = $carType;
            }

            // Ajouter dynamiquement la condition pour la p√©riode
            if ($period === 'last30') {
                $conditions[] = "r.date_debut >= CURDATE() - INTERVAL 30 DAY";
            } elseif ($period === 'last90') {
                $conditions[] = "r.date_debut >= CURDATE() - INTERVAL 90 DAY";
            }
            
            // Si des filtres sont actifs, on les ajoute √† la requ√™te SQL
            if (!empty($conditions)) {
                $sql .= " WHERE " . implode(" AND ", $conditions);
            }

            // 3. Ex√©cuter la requ√™te pour obtenir les dates de r√©servation
            $stmt = $pdo->prepare($sql);
            $stmt->execute($params);
            $dates = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);
            
            // 4. Agr√©ger les donn√©es : compter le nombre de r√©servations par jour
            $bookingsPerDay = [];
            foreach ($dates as $date) {
                $day = (new DateTime($date))->format('Y-m-d');
                if (!isset($bookingsPerDay[$day])) {
                    $bookingsPerDay[$day] = 0;
                }
                $bookingsPerDay[$day]++;
            }

            // 5. Formater les donn√©es historiques pour le graphique ApexCharts
            $seriesData = [];
            foreach ($bookingsPerDay as $day => $count) {
                $seriesData[] = ['x' => $day, 'y' => $count];
            }

            // 6. Pr√©diction intelligente avec l'IA
            $today = new DateTime();
            $historicalDataString = "";
            foreach($bookingsPerDay as $day => $count) {
                $historicalDataString .= "{$day}: {$count} r√©servations\n";
            }
            if (empty($historicalDataString)) {
                $historicalDataString = "Aucune donn√©e de r√©servation historique disponible.";
            }

            $predictionPrompt = "
            Tu es un analyste de donn√©es expert pour une agence de location de voitures.
            Ta mission est de pr√©dire la demande de r√©servations pour les 7 prochains jours.
            
            Informations √† ta disposition :
            - CONTEXTE ACTUEL : Nous sommes un " . $today->format('l') . " du mois de " . $today->format('F') . ".
            - DONN√âES HISTORIQUES (date: nombre de r√©servations) :
            {$historicalDataString}

            T√ÇCHE :
            Analyse les tendances (hebdomadaires, saisonni√®res) et pr√©dis le nombre de r√©servations pour les 7 prochains jours.
            Ta r√©ponse doit √™tre UNIQUEMENT un tableau JSON valide au format suivant :
            [{\"date\":\"YYYY-MM-DD\",\"prediction\":X}, ...]";
            
            // On appelle l'IA
            $predictionsJsonString = askGemini($predictionPrompt);
            $predictionsRaw = json_decode($predictionsJsonString, true);

            // 7. Formater la r√©ponse de l'IA ou utiliser le plan B
            $predictions = [];
            if (is_array($predictionsRaw)) {
                foreach ($predictionsRaw as $pred) {
                    if (isset($pred['date']) && isset($pred['prediction'])) {
                        $predictions[] = ['x' => $pred['date'], 'y' => $pred['prediction']];
                    }
                }
            } else {
                // Plan B : Simulation simple si l'IA √©choue
                error_log("R√©ponse de l'IA pour la pr√©diction n'est pas un JSON valide : " . $predictionsJsonString);
                $lastDayCount = end($bookingsPerDay) ?: 1;
                for ($i = 1; $i <= 7; $i++) {
                    $nextDay = (new DateTime("now +{$i} days"))->format('Y-m-d');
                    $predictions[] = ['x' => $nextDay, 'y' => max(0, $lastDayCount + rand(-1, 2))];
                }
            }

            // 8. Renvoyer toutes les donn√©es au format JSON
            echo json_encode([
                'success' => true,
                'data' => [
                    'historical' => $seriesData,
                    'predictions' => $predictions
                ]
            ]);

        } catch (PDOException $e) {
            http_response_code(500);
            echo json_encode(['success' => false, 'message' => 'Erreur de base de donn√©es.']);
        }
    } else {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
    }
    break;
// N'oubliez pas d'ajouter aussi ce nouveau 'case' pour peupler le filtre
case 'getCarTypes':
    if (isAdmin()) {
        try {
            $stmt = $pdo->query("SELECT DISTINCT type FROM voiture WHERE type IS NOT NULL AND type != '' ORDER BY type ASC");
            $types = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);
            echo json_encode(['success' => true, 'data' => $types]);
        } catch (PDOException $e) {
            echo json_encode(['success' => false, 'message' => 'Erreur de base de donn√©es.']);
        }
    } else {
        http_response_code(403);
        echo json_encode(['success' => false, 'message' => 'Acc√®s refus√©.']);
    }
    break;
// N'oubliez pas d'ajouter aussi ce nouveau 'case' pour peupler le filtre
 case 'getUserNotifications':
        if (isset($_SESSION['user_id'])) {
            $userId = $_SESSION['user_id'];
            // On r√©cup√®re les 10 derni√®res notifications
            $sql = "SELECT * FROM notifications WHERE id_user = ? ORDER BY date_creation DESC LIMIT 10";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([$userId]);
            $notifications = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            // On compte aussi le nombre de notifications non lues
            $sqlUnread = "SELECT COUNT(*) FROM notifications WHERE id_user = ? AND est_lu = FALSE";
            $stmtUnread = $pdo->prepare($sqlUnread);
            $stmtUnread->execute([$userId]);
            $unreadCount = $stmtUnread->fetchColumn();

            echo json_encode(['success' => true, 'data' => $notifications, 'unreadCount' => $unreadCount]);
        }
        break;

    case 'markNotificationsAsRead':
        if (isset($_SESSION['user_id'])) {
            $userId = $_SESSION['user_id'];
            $sql = "UPDATE notifications SET est_lu = TRUE WHERE id_user = ? AND est_lu = FALSE";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([$userId]);
            echo json_encode(['success' => true]);
        }
        break;

} ini_set('display_errors', 1);
error_reporting(E_ALL);
?>